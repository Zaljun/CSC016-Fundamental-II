 Lab 10: Lists 
CSC 16, Spring 2019

	
1. (25 pts) Finish the LinkedList class implementation based on the class definition in LinkedList.h. Test each function member in the testLinkedList.cpp file. 

2. (25 pts) Add a function in the LinkedList class that searches for an item with a particular value in the list. Below is the function prototype:

	int LinkedList::search(ElementType val);
	
The function will return the position of the node where the value val is found or -1 if not found. 
		
3. (25 pts) Add a function reverse() in the LinkedList class that reverses the order of the nodes in a list object. The reverse algorithm should not allocate memory for new nodes, just change the links of the existing nodes. 

        void LinkedList::reverse(); 


4. (25 pts) Add a function merge() in the LinkedList class which merges two sorted LinkedList objects in order. 
        
        Example input:              l1 = [1,5,6], l2 = [1,2, 5,7,8]
        Call the function merge:    l1.merge(l2)
        Output result:           l1 = [1, 1, 2, 5, 5, 6, 7, 8], l2 = [1,2,5,7,8]

        void LinkedList::merge(const LinkedList &other); 


//###################################################################
Turn in:
    * Cover page: Lab #, Course, Date, Name
	* The code (documented, clear and simple style).
    * Sample output for relevant testing cases. 
//###################################################################

